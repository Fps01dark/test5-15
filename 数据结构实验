//#define _CRT_SECURE_NO_WARNINGS 1
//#include<stdbool.h>
//#include<stdio.h>
//#include<stdlib.h>
////单链表定义
//typedef struct Node
//{
//	int data;
//	struct Node*next;
//}Node, *Linklist;
////初始化
//Linklist InitList()		
//{
//	Linklist L = (Linklist)malloc(sizeof(Node));
//	if (L == NULL)
//	{
//		printf("内存分配不成功！\n");
//	}
//	else
//	{
//		L->next = NULL;
//	}
//	return L;
//}
////尾插法建立单链表
//Linklist Tailinsert(Linklist L)
//{
//	Node*r = L, *s = L;
//	int x;
//	printf("请输入单链表元素");
//	scanf("%d", &x);
//	while (x)                   //输入0结束
//	{
//		s = (Node*)malloc(sizeof(Node));
//		s->data = x;
//		s->next = r->next;
//		r->next = s;
//		r = s;
//		scanf("%d", &x);
//	}
//	return L;
//} 
////遍历链表
//void Print(Linklist L)
//{
//	Node *p = L;
//	while (p->next != NULL)
//	{
//		p = p->next;
//		printf("%d ", p->data);
//	}
//}
////利用头插法逆置链表
//Linklist List_headlist(Linklist L)
//{
//	Linklist L1 = (Node*)malloc(sizeof(Node));        //建立新的头结点
//	L1->next = NULL;
//	Node*p1 , *p = L;
//	p = p->next;
//	while(p != NULL)
//	{
//		p1 = (Node*)malloc(sizeof(Node));
//		p1->data = p->data;
//		p1->next = L1->next;
//		L1->next = p1;
//		p = p->next;
//	}
//	return L1;
//}
////求链表长度
//int Length(Linklist L)
//{
//	Node *p = L;
//	p = p->next;
//	int l = 0;
//	while (p != NULL)
//	{
//		p = p->next;
//		l++;
//	}
//	return l;
//}
////在非递减有序单链表中插入一个元素使链表仍然有序
//void Insert(Linklist L, int x)
//{
//	Linklist p, s;
//	s = (Linklist)malloc(sizeof(Node));
//	s->data = x;
//	p = L;
//	while (p->next && p->next->data <= x)
//	{
//		p = p->next;
//	}
//	s->next = p->next;
//	p->next = s;
//}
////建立一个非递减有序单链表
//void Creat(Linklist L)
//{
//	int x;
//	printf("建立有序表");
//	scanf("%d", &x);
//	while (x)
//	{
//		Insert(L, x);
//		scanf("%d", &x);
//	}
//}
////建立两个非递减有序单链表，然后合并成一个非递减单链表
//void merger(Linklist La, Linklist Lb, Linklist Lc)
//{
//	Linklist p, q, s, rear;
//	p = La->next;
//	q = Lb->next;
//	rear = Lc;
//	while (p && q)
//	{
//		if (p->data < q->data)
//		{
//			s = p;
//			p = p->next;
//		}
//		else
//		{
//			s = q; 
//			q = q->next;
//		}
//		rear->next = s;
//		rear = rear->next;
//	}
//	if (p)
//	{
//		rear->next = p;
//	}
//	else
//	{
//		rear->next = q;
//	}
//}
////实现在非递减有序链表中删除值为x的结点
//void Delete(Linklist L, int x)
//{
//	Node*p = L, *q;
//	while (p->next->data != x)
//	{
//		p = p->next;
//	}
//	q = p->next;
//	p->next = q->next;
//	free(q);
//}
//void main()
//{
//	Linklist La , Lb , Lc ;
//	La = InitList();
//	Lb = InitList();
//	Lc = InitList();
//	int x;
//	int n;
//	printf("1.随机输入一组随机的元素，建立无序的单链表，以0结束\n");
//	printf("2.以输出的形式遍历单链表\n");
//	printf("3.把单向链表中元素逆置\n");
//	printf("4.建立一个非递减有序单链表\n");
//	printf("5.建立两个非递减有序单链表，然后合并成一个非递减单链表\n");
//	printf("6.在非递减有序单链表中插入一个元素\n");
//	printf("7.删除指定的元素\n");
//	while (1)
//	{
//		printf("请选择:");
//		scanf("%d", &n);
//		switch (n)
//		{
//		case 1:
//			Tailinsert(La);
//			break;
//		case 2:
//			Print(La);
//			break;
//		case 3:
//			La = List_headlist(La);
//			Print(La);
//			break;
//		case 4:
//			Creat(La);
//			Print(La);
//			break;
//		case 5:
//			Creat(La);
//			Creat(Lb);
//			merger(La, Lb, Lc);
//			Print(Lc);
//			break;
//		case 6:
//			Creat(La);
//			Print(La);
//			printf("请输入要插入的元素x:");
//			scanf("%d", &x);
//			Insert(La, x);
//			Print(La);
//			break;
//		case 7:
//			Creat(La);
//			Print(La);
//			printf("请输入要删除的元素x:");
//			scanf("%d", &x);
//			Delete(La, x);
//			Print(La);
//			break;
//		default:
//			printf("输入有误，请重新选择！\n");
//		}
//	}
//}
//#define _CRT_SECURE_NO_WARNINGS
//#include<stdio.h>
//#include<stdlib.h>
////顺序栈定义
//typedef struct
//{
//	int elem[50];            //用来存放栈中的一维数组
//	int top;                     //用来存放栈顶元素的下标，top=-1为空栈
//}Seqstack;
////初始化
//void Initstack(Seqstack *s)      //初始化
//{
//	s->top = -1;
//}
////顺序栈进栈
//int Push1(Seqstack *s, int x)
//{
//	if (s->top == 50 - 1)   return 0;
//	s->top++;
//	s->elem[s->top] = x;
//	return 1;
//}
////顺序栈出栈
//int Pop1(Seqstack *s, int *x)
//{
//	if (s->top == -1)
//		return 0;
//	else
//	{
//		*x = s->elem[s->top];
//		s->top--;
//		return 1;
//	}
//}
//void print1(Seqstack s)
//{
//	int i = 0;
//	for (i = 0; i <= s.top; i++)
//	{
//		printf("%d ", s.elem[i]);
//	}
//}
////链栈定义
//typedef struct node
//{
//	int data;
//	struct node*next;
//}Linkstacknode, *Linkstack;
////链栈初始化
//Linkstack Init()
//{
//	Linkstack L = (Linkstack)malloc(sizeof(Linkstacknode));
//	if (L == NULL)
//	{
//		printf("空间分配不成功！");
//	}
//	else
//		L->next = NULL;
//	return L;
//}
////链栈进栈
//int Push2(Linkstack top, int x)
//{
//	Linkstacknode * temp;
//	temp = (Linkstacknode*)malloc(sizeof(Linkstacknode));
//	temp->data = x;
//	temp->next = top->next;
//	top->next = temp;
//	return 1;
//}
////链栈出栈
//int Pop2(Linkstack top, int *x)
//{
//	Linkstacknode *temp;
//	temp = top->next;
//	if (temp == NULL)
//		return 0;                          //栈为空
//	*x = temp->data;
//	top->next = temp->next;
//	free(temp);
//	return 1;
//}
//void print2(Linkstack s)
//{
//	Linkstacknode *q = s;
//	while (q->next != NULL)
//	{
//		printf("%d ", q->next->data);
//		q = q->next;
//	}
//}
////链队列定义
//typedef struct Node
//{
//	int data;
//	struct node*next;
//}Linkqueuenode;
//typedef struct
//{
//	Linkqueuenode *front;
//	Linkqueuenode *rear;
//}Linkqueue;
////链队列初始化
//int Initqueue1(Linkqueue *q)
//{
//	q->front = (Linkqueuenode*)malloc(sizeof(Linkqueuenode));
//	if (q->front != NULL)
//	{
//		q->rear = q->front;
//		q->front->next = NULL;
//		return 1;
//	}
//	else
//		return 0;
//}
////链队列入队
//int Enterqueue1(Linkqueue *q, int x)
//{
//	Linkqueuenode* newnode;
//	newnode = (Linkqueuenode*)malloc(sizeof(Linkqueuenode));
//	if (newnode != NULL)
//	{
//		newnode->data = x;
//		newnode->next = NULL;
//		q->rear->next = newnode;
//		q->rear = newnode;
//		return 1;
//	}
//	else
//		return 0;
//}
////链队列出队
//int Deletequeue1(Linkqueue *q, int *x)
//{
//	Linkqueuenode *p;
//	if (q->front == q->rear)            //空队
//		return 0;
//	p = q->front->next;
//	q->front->next = p->next;
//	*x = p->data;
//	if (q->rear == p)
//	{
//		q->rear = q->front;
//	}
//	free(p);
//	return 1;
//}
//void print3(Linkqueue q)
//{
//	Linkqueuenode *t = q.front;
//	while (t->next != NULL)
//	{
//		printf("%d ", t->next->data);
//		t = t->next;
//	}
//}
////循环队列定义
//typedef struct
//{
//	int element[50];
//	int front;
//	int rear;
//}Seqqueue;
////循环链表初始化
//void Initqueue2(Seqqueue *q)
//{
//	q->front = q->rear = 0;
//}
////循环链表入队
//int Enterqueue2(Seqqueue *q, int x)
//{
//	if ((q->rear + 1) % 50 == q->front)    //尾指针+1追上头指针，标志队列已经满了
//		return 0;
//	q->element[q->rear] = x;
//	q->rear = (q->rear + 1) % 50;         //重新设立尾指针
//	return 1;
//}
////循环链表出队
//int Deletequeue2(Seqqueue *q, int *x)      //删除队列的队头元素，用x返回其值
//{
//	if (q->front == q->rear)
//		return 0;                         //队列为空
//	*x = q->element[q->front];
//	q->front = (q->front + 1) % 50;
//	return 1;
//}
//void print4(Seqqueue q)
//{
//	int i = 0;
//	if (q.front <= q.rear)
//	{
//		for (i = q.front; i < q.rear; i++)
//		{
//			printf("%d ", q.element[i]);
//		}
//	}
//	else
//	{
//		for (i = q.front; i < 50; i++)
//		{
//			printf("%d ", q.element[i]);
//		}
//		for (i = 0; i < q.rear; i++)
//		{
//			printf("%d ", q.element[i]);
//		}
//	}
//}
//void main()
//{
//	int n;
//	int x = 0;
//	//	printf("1.顺序栈初始化！\n");
//	printf("2.顺序栈入栈！\n");
//	printf("3.顺序栈出栈！\n");
//	//	printf("4.链式栈初始化！\n");
//	printf("5.链式栈入栈！\n");
//	printf("6.链式栈出栈！\n");
//	//	printf("7.链式队列初始化！\n");
//	printf("8.链式队列入队！\n");
//	printf("9.链式队列出队！\n");
//	//	printf("10.循环队列初始化！\n");
//	printf("11.循环队列入队！\n");
//	printf("12.循环队列出队！\n");
//	scanf("%d", &n);
//	Seqstack s;           //顺序栈
//	Linkstack L;          //链栈
//	Linkqueue Q;         //链队列
//	Seqqueue q;          //循环队列
//	Initstack(&s);
//	L = Init();
//	Initqueue1(&Q);
//	Initqueue2(&q);
//	while (n)
//	{
//		switch (n)
//		{
//			//case 1:
//			//break;
//		case 2:
//			printf("请输入你想要添加的数字：");
//			scanf("%d", &x);
//			Push1(&s, x);
//			print1(s);
//			break;
//		case 3:
//			Pop1(&s, &x);
//			print1(s);
//			break;
//			//case 4:
//
//			//break;
//		case 5:
//			printf("请输入你想要添加的数字：");
//			scanf("%d", &x);
//			Push2(L, x);
//			print2(L);
//			break;
//		case 6:
//			Pop2(L, &x);
//			print2(L);
//			break;
//			//case 7:
//			//break;
//		case 8:
//			printf("请输入你想要添加的数字：");
//			scanf("%d", &x);
//			Enterqueue1(&Q, x);
//			print3(Q);
//			break;
//		case 9:
//			Deletequeue1(&Q, &x);
//			print3(Q);
//			break;
//			//case 10:
//			//break;
//		case 11:
//			printf("请输入你想要添加的数字：");
//			scanf("%d", &x);
//			Enterqueue2(&q, x);
//			print4(q);
//			break;
//		case 12:
//			Deletequeue2(&q, &x);
//			print4(q);
//			break;
//		default:
//			printf("输入错误！请重试");
//			scanf("%d", &n);
//		}
//		printf("\n请选择：");
//		scanf("%d", &n);
//	}
//	system("pause");
//}
