//#define _CRT_SECURE_NO_WARNINGS
//#include<iostream>
//using namespace std;
//class matrix //矩阵相加
//{
//public:
//	matrix(char *row1 = "",char *row2="")
//	{
//		m_row1 = new char[strlen(row1) + 1];
//		strcpy(m_row1, row1);
//		m_row2 = new char[strlen(row2) + 1];
//		strcpy(m_row2, row2);
//	}
//	void print()
//	{
//		cout << m_row1 << endl;
//		cout << m_row2 << endl;
//	}
//	matrix operator +(matrix &a)
//	{
//
//		char *temp1 = new char[strlen(m_row1) + 1];
//		char *temp2 = new char[strlen(m_row2) + 1];
//		for (int i = 0; i < 4; i++)
//		{
//			temp1[i] = m_row1[i] + a.m_row1[i];
//			temp2[i] = m_row2[i] + a.m_row2[i];
//		}
//		matrix temp(temp1,temp2);
//		delete[]temp1;
//		delete[]temp2;
//		return temp;
//	}
//	matrix& operator =(matrix &b)
//	{
//		delete[]m_row1;
//		delete[]m_row2;
//		m_row1 = new char[strlen(b.m_row1) + 1];
//		m_row2 = new char[strlen(b.m_row2) + 1];
//		strcpy(m_row1, b.m_row1);
//		strcpy(m_row2, b.m_row2);
//		return *this;
//	}
//	~matrix()
//	{
//		if (m_row1 != NULL)
//		{
//			delete[]m_row1;
//			m_row1 = NULL;
//		}
//		if (m_row2 != NULL)
//		{
//			delete[]m_row2;
//			m_row2 = NULL;
//		}
//	}
//private:
//	char*m_row1;
//	char*m_row2;
//};
//void main()
//{
//	cout << "第一个矩阵：" << endl; 
//	matrix mat1("123","456");
//	mat1.print();
//	cout << "第二个矩阵：" << endl;
//	matrix mat2("654", "321");
//	mat2.print();
//	matrix mat3;
//	mat3 = mat1 + mat2;
//	mat3.print();
//	system("pause");
//}#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<math.h>
using namespace std;
class shape
{
public:
	virtual double area() = 0;
};
class circle :public shape
{
public:
	circle(double m_r = 0) :r(m_r)
	{}
	virtual double area()
	{
		return(3.14*r*r);
	}
private:
	double r;
};
class square :public shape
{
public:
	square(double m_edge = 0) :edge(m_edge)
	{}
	virtual double area()
	{
		return (edge*edge);
	}
private:
	double edge;
};
class rectangle:public shape
{
public:
	rectangle(double m_longth = 0, double m_width = 0) :longth(m_longth), width(m_width)
	{}
	virtual double area()
	{
		return (longth*width);
	}
private:
	double longth;
	double width;
};
class trapezoid :public shape
{
public:
	trapezoid(double m_h = 0, double m_up = 0, double m_down = 0) :h(m_h), up(m_up), down(m_down)
	{}
	virtual double area()
	{
		return (0.5*h*(up + down));
	}
private:
	double h;
	double up;
	double down;
};
class triangle :public shape
{
public:
	triangle(double m_edge = 0) :edge(m_edge)
	{}
	virtual double area()
	{
		return (sqrt(3.0) / 4 * edge);
	}
private:
	double edge;
};
void main()
{
	circle circle1(1);
	square square1(2);
	rectangle rectangle1(1, 2);
	trapezoid trapezoid1(1, 2, 2);
	triangle triangle1(1);
	double sum = 0;
	shape *p[5] = { &circle1, &square1, &rectangle1, &trapezoid1, &triangle1 };
	//p[0] = new circle(1);
	//p[1] = new square(2);
	//p[2] = new rectangle(1,2);
	//p[3] = new trapezoid(1,2,2);
	//p[4] = new triangle(1);
	for (int i = 0; i < 5; i++)
	{
		sum=sum+p[i]->area();
		//delete p[i];
		//p[i] = NULL;
	}
	cout << sum << endl;
	system("pause");
}//#define _CRT_SECURE_NO_WARNINGS
//#include<iostream>
//#include<string>
//using namespace std;
//class teacher
//{
//public:
//	teacher(char *m_name = "", int m_age = 0, string m_title="") :age(m_age), title(m_title)
//	{
//		name = new char[strlen(m_name) + 1];
//		strcpy(name, m_name);
//	}
//	~teacher()
//	{
//		if (name != NULL)
//		{
//			delete[]name;
//			name = NULL;
//		}
//	}
//protected:
//	char*name;
//	int age;
//	string title;
//};
//class student
//{
//public:
//	student(string m_name = "", char m_sex = ' ', float m_score = 0):namel(m_name), sex(m_sex), score(m_score)
//	{
//
//	}
//protected:
//	string namel;
//	char sex;
//	float score;
//};
//class graduate:public student,public teacher 
//{
//public:
//	graduate(char*m_name = "", int m_age = 0, string m_title = "", char m_sex = ' ', float m_score = 0,float m_wage=0)
//		:teacher(m_name, m_age, m_title), student(m_name, m_sex, m_score), wage(m_wage)
//	{
//
//	}
//	void show()
//	{
//		cout << "name:" << name << endl;
//		cout << "age:" << age << endl;
//		cout << "sex:" << sex << endl;
//		cout << "score:" << score << endl;
//		cout << "title:" << title << endl;
//		cout << "wages:" << wage << endl;
//	}
//private:
//	float wage;
//};
//void main()
//{
//	graduate grad1("li Hua", 18, "student", 'f', 89, 2000);
//	grad1.show();
//	system("pause");
//}//#define _CRT_SECURE_NO_WARNINGS
//#include<iostream>
//#include<vector>  //开辟动态数组
//#include<algorithm> //算法
//using namespace std;
//void swap(int &a, int &b) //交換兩個變數
//{
//	int temp = a;
//	a = b;
//	b = temp;
//}
//void sort1(int *arr,int n) //冒泡排序
//{
//	int i = 0, j = 0;
//	int temp = 0;
//	for (i = 0; i < n - 1; i++)
//	{
//		for (j = 0; j < n - i - 1; j++)
//		{
//			if (arr[j]>arr[j + 1])
//			{
//				swap(arr[j], arr[j + 1]);
//			}
//		}
//	}
//}
//void sort2(int arr[], int n) //选择排序
//{
//	int i, j;
//	for (i = 0; i < n - 1; i++)
//	{
//		int min = i;
//		for (j = i + 1; j < n; j++)     //走訪未排序的元素
//		if (arr[j] < arr[min])    //找到目前最小值
//			min = j;   
//		swap(arr[min], arr[i]);    //做交換
//	}
//}
////void main() //非动态数组
////{
////	int arr[10] = { 0 };
////	cout << "请输入10个数：" ;
////	for (int i = 0; i < 10; i++)
////	{
////		cin >> arr[i];
////	}
////	int n = sizeof(arr) / sizeof(arr[0]);
////	//sort1(arr,n);
////	//sort2(arr,n);
////	//sort(arr, arr + n); //头文件algorithm的sort函数（快排）默认从小到大
////	cout << "从小到大：";
////	for (int i = 0; i < 10; i++)
////	{
////		cout<< arr[i]<<" ";
////	}
////	system("pause");
////}
////void main() //动态数组创建
////{
////	vector <int> nums;
////	for (int temp = 0; cin >> temp;)
////	{
////		nums.push_back(temp);
////		if (cin.get() == '\n')
////			break;
////	}
////	cout << "输入元素的个数：" << nums.size() << endl;
////	for (int i = 0; i < nums.size(); i++)
////	{
////		cout << nums[i] << " ";
////	}
////	system("pause");
////}
//void main() //动态数组
//{
//	int n = 0;
//	cout << "请输入你要输入的元素个数：" << endl;
//	cin >> n;
//	int *p_arr = new int[n];
//	cout << "请输入你要输入的元素：" << endl;
//	for (int i = 0; i < n; i++)
//	{
//		cin >> p_arr[i]; //*p_arr+i
//	}
//	//sort1(p_arr, n);
//	//sort2(p_arr, n);
//	sort(p_arr, p_arr + n);
//	cout << "排序后："<<endl;
//	for (int i = 0; i < n; i++)
//	{
//		cout<< p_arr[i]<<" "; //*p_arr+i
//	}
//	delete[]p_arr;
//	p_arr = NULL;
//	system("pause");
//}//#define _CRT_SECURE_NO_WARNINGS
//#include <iostream>
//
//using namespace std;
////void print(char *s);                      //定义输出函数
////int main()
////{
////	char str[80];
////	cout << "Please enter string: ";        //输入字符串
////	gets(str);
////	print(str);                           //调用输出函数
////	system("pause");
////	return 0;
////}
////void print(char *s)
////{
////	int a[10], i, j, num, t;              //i为数组a的下标，num是判断是否是数字，t是最终的整数
////	char *p;
////	for (p = s, i = 0, j = 10, num = 0, t = 0; *p != '\0'; p++)
////	{
////		if (*p >= '0'&&*p <= '9')
////		{
////			num = 1, t = t*j + (*p - '0');
////		}
////		else if (num == 1)
////		{
////			num = 0, a[i++] = t, t = 0;
////		}
////		if (*p >= '0'&&*p <= '9'&&*(p + 1) == '\0')
////		{   //此条件是判断字符串末尾是数字的情况下加入一个字符，避免最后一个整数没有录入就跳出循环
////			*(p + 2) = '\0', *(p + 1) = 'e';
////		}
////	}
////	j = i;
////	for (i = 0, cout << "Array: "; i<j; i++)
////		cout << a[i] << ' ';
////	cout << endl;
////}
//void print(char *p);
//void main()
//{
//	char str[30] = "";
//	gets(str);
//	print(str);
//	system("pause");
//}
//void print(char *p)
//{
//	int a[10] = { 0 };
//	int i = 0;
//	int j = 0;
//	int t = 0;
//	int num = 0;
//	for (; *p != '\0'; p++)
//	{
//		if (*p >= '0'&&*p <= '9')
//		{
//			t = t * 10 + (*p - '0');
//			num = 1;
//		}
//		else if (num==1)
//		{
//			*(a+i) = t;
//			num = 0;
//			i++;
//			t = 0;
//		}
//		if (*p >= '0'&&*p <= '9'&&*(p + 1) == '\0')
//			*(p + 2) = '\0', *(p + 1) = 'a';
//	}
//	for (j = 0; j < i; j++)
//	{
//		cout << " " << a[j];
//	}
//	cout << endl;
//}
